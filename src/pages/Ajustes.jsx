import React, { useState, useRef, useEffect } from "react";
import { auth } from "../api/firebase-config";
import { BsCheckLg } from "react-icons/bs";
import { GrAdd } from "react-icons/gr";
import { Modal, Box, Avatar } from "@mui/material";
import {
  ref,
  uploadBytes,
  getDownloadURL,
  deleteObject,
} from "firebase/storage";
import { storage } from "../api/firebase-config";
import { v4 } from "uuid";
import { updateProfile } from "firebase/auth";
import userServices from "../api/user.services";

/**
 * @component
 * Renders a Settings component that allows the user to update their profile information and profile picture.
 *
 * @function
 * @name Settings
 *
 * @return {JSX.Element} JSX element representing the Settings component.
 *
 * @requires React from react
 * @requires useState from react
 * @requires useRef from react
 * @requires useEffect from react
 * @requires auth from ../api/firebase-config
 * @requires BsCheckLg from react-icons/bs
 * @requires GrAdd from react-icons/gr
 * @requires Modal from @mui/material
 * @requires Box from @mui/material
 * @requires Avatar from @mui/material
 * @requires ref from firebase/storage
 * @requires uploadBytes from firebase/storage
 * @requires getDownloadURL from firebase/storage
 * @requires deleteObject from firebase/storage
 * @requires storage from ../api/firebase-config
 * @requires v4 from uuid
 * @requires updateProfile from firebase/auth
 * @requires userServices from ../api/user.services
 */

const Settings = () => {
  /**
   * The current user that is authenticated.
   * @type {Object}
   */
  const currentUser = auth.currentUser;

  /**
   * The default URL for the profile picture.
   * @type {string}
   */
  const defaultProfilePicUrl =
    "https://firebasestorage.googleapis.com/v0/b/j1web-7dc6e.appspot.com/o/profilePics%2Fdefault%2Fblank-profile-picture-973460_1280.webp?alt=media&token=4196e70b-dbb5-4ca6-8526-9169a854635a";

  /**
   * The currently selected index of a component.
   * @type {number}
   */
  const [selected, setSelected] = useState(0);

  /**
   * The state of a component's modal.
   * @type {boolean}
   */
  const [open, setOpen] = useState(false);

  /**
   * The currently uploaded image.
   * @type {Object}
   */
  const [image, setImage] = useState(null);

  /**
   * The profile picture of the current user.
   * @type {string}
   */
  const [profilePic, setProfilePic] = useState(currentUser.photoURL);

  /**
   * A reference to an image element.
   * @type {Object}
   */
  const imgRef = useRef(null);

  /**
   * Updates the currently selected index of a component based on the clicked target.
   * @function
   *
   * @param {Object} e - The event object generated by the click.
   * @returns {void}
   */
  const handleSelected = (e) => {
    e.preventDefault();
    setSelected(e.target.id);
  };

  /**
   * Uploads an image and updates the current user's profile picture.
   * @function
   *
   * @param {Object} e - The event object generated by the upload.
   * @returns {void}
   */
  const handleUpload = (e) => {
    e.preventDefault();
    const imageRef = ref(
      storage,
      `profilePics/${currentUser.uid}/${image.name + v4()}`
    );
    uploadBytes(imageRef, image).then((snapshot) => {
      getDownloadURL(snapshot.ref).then((url) => {
        uploadProfilePic({ url });
      });
    });
    setImage(null);
    imgRef.current.value = null;
  };

  /**
   * Uploads a user's profile picture to Firebase storage and updates the user's document in Firestore.
   * @function
   *
   * @param {Object} data - An object containing the URL of the uploaded image.
   * @returns {void}
   */
  const uploadProfilePic = ({ url }) => {
    if (currentUser.photoURL !== defaultProfilePicUrl) {
      const photoRef = ref(storage, currentUser.photoURL);
      deleteObject(photoRef);
    }
    updateProfile(currentUser, { photoURL: url });
    let user = userServices.getUser(currentUser.uid);
    user = { ...user, photo: url };
    userServices.updateUser(currentUser.uid, user);
    setProfilePic(url);
  };

  return (
    <div>
      <hr />
      <div className="m-auto h-screen border-l-2 border-r-2 border-gray-400 p-5 text-left sm:w-11/12 md:w-2/3 lg:w-1/3">
        <h1 className="my-3 text-4xl font-bold">Informacion personal</h1>
        <hr />
        <div>
          <div className="float-left my-3 w-2/3">
            Nombre: {currentUser.displayName}
          </div>
          <button className="float-right my-3 w-1/3 ">Cambiar nombre</button>
        </div>
        <hr />
        <div className="float-left my-3 w-2/3 ">
          <div className="">Foto de usuario: </div>
          <Avatar
            className="m-3"
            alt="lol"
            src={profilePic}
            sx={{ height: 100, width: 100 }}
          />
        </div>
        {image == null && (
          <button
            className="float-right my-3 w-1/3 "
            onClick={() => {
              setOpen(!open);
            }}
          >
            Cambiar foto
          </button>
        )}
        {image != null && (
          <button className="float-right w-1/3 " onClick={handleUpload}>
            Subir foto
          </button>
        )}

        <span className="float-left my-3 w-full ">
          E-mail: {currentUser.email}
        </span>

        <Modal
          open={open}
          onClose={() => {
            setOpen(!open);
          }}
        >
          <Box className="mx-auto my-72 h-64 w-1/2 bg-white text-center ">
            <input
              type="file"
              ref={imgRef}
              className="h-full w-full"
              onChange={(event) => {
                setImage(event.target.files[0]);
              }}
            />
          </Box>
        </Modal>

        <h1 className="my-3 mt-48 text-4xl font-bold">Seguridad</h1>
        <hr />

        <div>
          <div className="float-left my-3 w-2/3">Cambiar contrase√±a.</div>
          <input className="float-right my-3 w-1/3" />

          <div className="float-left my-3 w-2/3">Verificar Correo.</div>
          <div className="float-right my-3 w-1/3">
            {currentUser.emailVerified ? (
              <BsCheckLg />
            ) : (
              <GrAdd className="rotate-45 scale-150" />
            )}
          </div>

          <div className="float-left my-3 w-2/3 ">Eliminar cuenta</div>
          <button className="float-right my-3 w-1/3 text-red-500"> !!! </button>
        </div>
      </div>
    </div>
  );
};

export default Settings;
